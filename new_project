#! /Users/rahul/Developer/python_projects/new_project/vir_env/bin/python3

""" This module automates the tedious process of creating a new project & setting
up Git/GitHub """

import subprocess
import sys
from colorama import Fore, init


from dotenv import load_dotenv
from simple_term_menu import TerminalMenu

from github_helpers import (
    connect_github_with_project,
    initialize_github,
    does_github_repo_exists,
)
from project import create_project, open_project
from config_settings import initialize_config_file
from utils import (
    has_setup_env_variables,
    load_project_templates,
    has_setup_config_file,
    validate_yn_inputs,
    load_config,
    bool_to_yn,
    yn_to_bool,
)

load_dotenv()
init(autoreset=True)

CONFIG = load_config()
PROJECT_TEMPLATES = load_project_templates(CONFIG["project_types"])
PROJECT_TEMPLATES.extend(["quit"])
project_template_menu = TerminalMenu(PROJECT_TEMPLATES)


def main():
    """Starting point of the script"""

    has_setup_env_variables()
    has_setup_config_file()

    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            initialize_config_file()
            sys.exit()

    github_instance = initialize_github()

    subprocess.run("clear", shell=True, check=True)
    project_name = input("Enter project name ( Eg: my_portfolio ): ")
    if not project_name:
        print(f"{Fore.RED}Please provide a project name")
        sys.exit()

    does_github_repo_exists(github_instance, project_name)

    print(
        """
Select the type of project from the list below (type the value eg: react_typescript):
"""
    )

    template = PROJECT_TEMPLATES[project_template_menu.show()]
    if template == "quit":
        sys.exit()

    is_repo_private = input(
        f"\nDo you want to create a private repo(y/n) default value is {'y' if CONFIG['github']['repo']['is_private'] else 'n'}: "
    ) or bool_to_yn(CONFIG["github"]["repo"]["is_private"])
    if validate_yn_inputs(is_repo_private):
        pass

    create_project(project_name, template)
    connect_github_with_project(
        github_instance,
        {
            "repo_name": project_name,
            "is_private": yn_to_bool(is_repo_private),
        },
    )
    open_project(project_name)


if __name__ == "__main__":
    main()
